# -*- coding: utf-8 -*-
"""Proyek Pertama : Membuat Model NLP dengan TensorFlow .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1G7FDf_oilTUf7DJZZ-iI_bRovguVy3UG

Nama : Nabilah Sofieyanti

Proyek Pertama : Membuat Model NLP dengan TensorFlow

Belajar Pengembangan Machine Learning
"""

#import library
import pandas as pd 

from sklearn.model_selection import train_test_split

import tensorflow as tf
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

import matplotlib.pyplot as plt

df = pd.read_csv('IMDB Dataset.csv')

df.info()

df.head()

#melakukan one hot encoding karena label berupa data karegorikal
sentiment = pd.get_dummies(df.sentiment)
df_baru = pd.concat([df, sentiment], axis=1)
df_baru = df_baru.drop(columns='sentiment')
df_baru

#mengubah nilai-nilai dari dataframe ke dalam tipe data numpy array menggunakan atribut values.
review = df_baru['review'].values
label = df_baru[['negative', 'positive']].values

#bagi data untuk data training dan data test
review_train, review_test, label_train, label_test = train_test_split(review, label, test_size=0.2)

#melakukan tokenisasi pada data latih dan data test

 #tokenisasi
tokenizer = Tokenizer(num_words=250, oov_token='x')
tokenizer.fit_on_texts(review_train)
tokenizer.fit_on_texts(review_test)
 
#sequences
sequences_train = tokenizer.texts_to_sequences(review_train)
sequences_test = tokenizer.texts_to_sequences(review_test)
 
#padding
padded_train = pad_sequences(sequences_train) 
padded_test = pad_sequences(sequences_test)

#arsitektur model
model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim=250, output_dim=16), 
    tf.keras.layers.LSTM(64),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(2, activation='sigmoid'),
])

#optimizer dan loss
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])

#callbacks
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('accuracy')>0.85) and (logs.get('val_accuracy')>0.85):
      print("\nAkurasi telah mencapai >85%!")
      self.model.stop_training = True
callbacks = myCallback()

#pelatihan model
num_epochs = 30
history = model.fit(padded_train, label_train, epochs=num_epochs, callbacks=[callbacks], 
                    validation_data=(padded_test, label_test), verbose=2)

#plot loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper right')
plt.show()

#plot akurasi
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()















