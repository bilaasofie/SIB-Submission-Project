# -*- coding: utf-8 -*-
"""Proyek Pertama : Predictive Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Gv2LzsHiXZhtx41wI3u2MBtBCfWaGi2l

Nama : Nabilah Sofieyanti

Proyek Pertama : Predictive Analytics

Machine Learning Terapan

## Import Library

Langkah pertama adalah mengimport library-library yang dibutuhkan dalam pengerjaan proyek ini.
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import AdaBoostRegressor

"""## Load Dataset

Data yang digunakan ialah data rumah di kota Jakarta. Data sebagai berikut :

-Terdapat 1010 records atau jumlah pengamatan dalam dataset

-Terdapat 8 kolom yaitu NO, NAMA RUMAH, HARGA, LB dalam m^2 (Luas Bangunan), LT dalam m^2 (Luas Tanah), KT (Jumlah Kamar Tidur), KM (Jumlah Kamar Mandi), dan GRS (Jumlah Kapasitas mobil dalam garasi).
"""

harga_rumah = pd.read_excel('DATA RUMAH.xlsx')
harga_rumah

"""## Data Understanding

### Deskripsi variabel

Berdasarkan informasi dari sumber data berikut deskripsi variabel dari dataset tersebut:

-Harga dalam rupiah yang merupakan fitur target

-LB: Luas Bangunan dalam m^2

-LT: Luas Tanah dalam m^2

-KT: Jumlah kamar tidur

-KM: Jumlah kamar mandi

-GRS: Jumlah kapasitas mobil dalam garasi

Selanjutnya, melihat bagaimana deskripsi data secara statistik serta tipe data sebagai berikut.
"""

harga_rumah.describe()

harga_rumah.info()

"""Hasil fungsi info() menunjukan bahwa tipe seluruh variabel adalah integer, kecuali NAMA RUMAH yaitu string/object. Serta tidak ada missing value.

## Outliers

Selanjutnya, mengecek apakah terdapat data outliers dengan melihat sebaran data menggunakan boxplot.

### Fitur Luas Bangunan
"""

sns.boxplot(x=harga_rumah['LB'])

"""### Fitur Luas Tanah"""

sns.boxplot(x=harga_rumah['LT'])

"""### Fitur kamar tidur"""

sns.boxplot(x=harga_rumah['KT'])

"""### Fitur kamar mandi"""

sns.boxplot(x=harga_rumah['KM'])

"""### Fitur kapasitas mobil dalam garasi"""

sns.boxplot(x=harga_rumah['GRS'])

"""Dari plot-plot di atas menunjukan bahwa pada fitur-fitur terdapat outliers yang akan ditangani pada tahap data preparation (data cleaning)

## Numerical Features

Karena pada dataset fitur yang akan digunakan hanyalah fitur numerik maka hanya dilakukan univariate dan multivariate analysis pada numerical features.

### Univariate Analysis
"""

harga_rumah.hist(bins=50, figsize=(20,15))
plt.show()

"""Dari hasil di atas khususnya plot harga terlihat bahwa distribusi harga miring ke kanan atau disebut reight skewed.

### Multivariate Analysis
"""

# Mengamati hubungan antar fitur numerik dengan fungsi pairplot()
sns.pairplot(harga_rumah, diag_kind = 'kde')

"""Dari pairplot diatas, terlihat terbentuk pola adanya hubungan korelasi antara harga dengan Luas tanah dan harga dengan Luas Bangunan.

### Evaluasi skor korelasi
"""

plt.figure(figsize=(10, 8))
correlation_matrix = harga_rumah.corr().round(2)
 
# Untuk menge-print nilai di dalam kotak, gunakan parameter anot=True
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""Hasil matriks korelasi di atas, terlihat korelasi seluruh variabel terhadap fitur harga berkorelasi positif namun untuk KT, KM, dan GRS berkorelasi lemah sedangkan LB dan LT berkorelasi cukup tinggi.

## Data Preparation

### Data Cleaning

Untuk kolom NO dan NAMA RUMAH sekiranya mungkin kurang diperlukan sehingga dihapus dari dataset.
"""

harga_rumah = harga_rumah.drop(columns = ['NO','NAMA RUMAH'])
harga_rumah

"""Sehingga, untuk ukuran dataset menjadi 6 kolom."""

harga_rumah.shape

"""Dilanjut menangani outliers dengan teknik IQR Method."""

Q1 = harga_rumah.quantile(0.25)
Q3 = harga_rumah.quantile(0.75)
IQR=Q3-Q1
harga_rumah=harga_rumah[~((harga_rumah<(Q1-1.5*IQR))|(harga_rumah>(Q3+1.5*IQR))).any(axis=1)]
 
# Cek ukuran dataset setelah drop outliers
harga_rumah.shape

"""### Data Transform

Untuk variabel HARGA ditransformasi menjadi satuan milyar agar mudah dipahami.
"""

harga_rumah['HARGA'] = harga_rumah['HARGA']/1000000000
harga_rumah

"""### Train test split

Membagi dataset menjadi data train dan data test sbelum membuat model dengan ukuran data test 20% dari jumlah dataset dengan random state=123
"""

X = harga_rumah.drop(["HARGA"],axis =1)
y = harga_rumah["HARGA"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 123)

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""### Standarisasi

Dilakukan standarisasi untuk membuat fitur data menjadi bentuk yang mudah diolah.
"""

numerical_features = ['LB', 'LT', 'KM', 'KT', 'GRS']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

#cek nilai mead dan sd setelah standarisasi
X_train[numerical_features].describe().round(3)

"""Untuk melihat hasil standarisasi, bisa dilihat dengan hasil mean yaitu 0 dan standar deviasi yaitu 1.

## Modelling

### KNN

Algoritma ini menggunakan 'kesamaan fitur' untuk memprediksi nilai dari data yang baru.
"""

#dataframe untuk analisis model
models = pd.DataFrame(index=['train_mse', 'test_mse'], 
                      columns=['KNN', 'RandomForest', 'Boosting'])

#KNN
knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)
 
models.loc['train_mse','knn'] = mean_squared_error(y_pred = knn.predict(X_train), y_true=y_train)

"""### Random forest

Algoritma ini cocok digunakan untuk masalah klasifikasi dan regresi. Metrik yang digunakan ialah MSE.
"""

#Bagging Algorithm
RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(X_train, y_train)
 
models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

"""### Boosting Algorithm

Algoritma ini membangun model dari data latih secara berurutan atau dalam proses yang iteratif. Bertujuan untuk meningkatkan akurasi.
"""

#Boosting Algorithm
boosting = AdaBoostRegressor(learning_rate=0.05, random_state=55)                             
boosting.fit(X_train, y_train)
models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train)

"""## Evaluasi model

Proses scaling baru dilakukan pada data test.
"""

#Scalling data uji
# Lakukan scaling terhadap fitur numerik pada X_test sehingga memiliki rata-rata=0 dan varians=1
X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

"""Selajutnya mengevaluasi ketiga model/algoritma tadi dengan metrik MSE. """

#Evaluasi ketiga model dengan metrik MSE
# Buat variabel mse yang isinya adalah dataframe nilai mse data train dan test pada masing-masing algoritma
mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting'])
 
# Buat dictionary untuk setiap algoritma yang digunakan
model_dict = {'KNN': knn, 'RF': RF, 'Boosting': boosting}
 
# Hitung Mean Squared Error masing-masing algoritma pada data train dan test
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3 
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3
 
# Panggil mse
mse

#Plot metrik dengan bar chart
fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""Dilihat dari plot diatas untuk error pada data test ketiganya hampir sama namun pada data train, model RF memiliki error paling kecil.

## Prediksi

Kemudian dilakukan prediksi, ternyata benar dari ketiga algoritma/model tersebut hasil yang paling mendekati ialah model Random Forest.
"""

prediksi = X_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)
 
pd.DataFrame(pred_dict)

"""## Kesimpulan

Berdasarkan problem statement yang ditentukan sebelumnya, maka dapat diketahui bahwa fitur yang paling berpengaruh dalam prediksi harga rumah ialah luas tanah dan luas bangunan. Kedua fitur tersebut berkorelasi paling tinggi terhadap harga rumah. Serta model sistem prediksi terbaik adalah model Random Forest karena memiliki nilai error terkecil dan hasil prediksi mendekati nilai aslinya.
"""